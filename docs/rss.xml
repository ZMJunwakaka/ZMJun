<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0"><channel><title>郑明君のBlog</title><link>https://ZMJunwakaka.github.io/ZMJun</link><description>C# Learning Blog</description><copyright>郑明君のBlog</copyright><docs>http://www.rssboard.org/rss-specification</docs><generator>python-feedgen</generator><image><url>https://avatars.githubusercontent.com/u/80440497?v=4</url><title>avatar</title><link>https://ZMJunwakaka.github.io/ZMJun</link></image><lastBuildDate>Thu, 02 Jan 2025 10:29:44 +0000</lastBuildDate><managingEditor>郑明君のBlog</managingEditor><ttl>60</ttl><webMaster>郑明君のBlog</webMaster><item><title>20250102新年学习计划--持续更新</title><link>https://ZMJunwakaka.github.io/ZMJun/post/20250102-xin-nian-xue-xi-ji-hua----chi-xu-geng-xin.html</link><description>学习计划：&#13;
2025-01-01至2025-01-05--复习宋红康mysql基础篇--查缺补漏&#13;
2025-01-05至2025-01-31--学习宋红康mysql高级篇&#13;
&#13;
1协议学习：jwt session http协议、mqtt协议、tcp、udp等&#13;
2设计模式：分开学习，先学车库涉及的和基础的再学后面的&#13;
3多线程与并发编程，juc&#13;
4redis基础复习，应用场景梳理，缓存等，&#13;
5docker&#13;
6看redis高级前置条件查哪些进行学习。</description><guid isPermaLink="true">https://ZMJunwakaka.github.io/ZMJun/post/20250102-xin-nian-xue-xi-ji-hua----chi-xu-geng-xin.html</guid><pubDate>Thu, 02 Jan 2025 10:15:31 +0000</pubDate></item><item><title>20241115学习路线图---持续总结</title><link>https://ZMJunwakaka.github.io/ZMJun/post/20241115-xue-xi-lu-xian-tu-----chi-xu-zong-jie.html</link><description>&lt;img width='341' alt='Image' src='https://github.com/user-attachments/assets/6f82519e-9db0-44b7-95c9-eb58fb49202c' /&gt;&#13;
1. 内存、cpu分析、sql优化，知道底层，热门了解，CI命令行，反编译公共技术框架代码tsf，前端&#13;
2. 计算机网络tcp、udp、http等协议&#13;
3. 补习.net基础、规范、框架与微服务&#13;
4. docker&#13;
5. mqtt&#13;
6. C#并发编程、多线程&#13;
7. mysql调优数据库查询优化：sql索引、锁、基础查询、查询计划&#13;
8. redis&#13;
9. rabbitmq&#13;
10. kafka&#13;
11. elastic search&#13;
12. 设计模式&#13;
13. vue、js等前端&#13;
总之：先学习框架、再学习中间件、再学习前端，画一个双技术栈学习路线图&#13;
也要去网上多找找路线教程&#13;
&#13;
。</description><guid isPermaLink="true">https://ZMJunwakaka.github.io/ZMJun/post/20241115-xue-xi-lu-xian-tu-----chi-xu-zong-jie.html</guid><pubDate>Fri, 15 Nov 2024 12:05:28 +0000</pubDate></item><item><title>20241113事务与异常</title><link>https://ZMJunwakaka.github.io/ZMJun/post/20241113-shi-wu-yu-yi-chang.html</link><description>1. 事务与异常的包含关系取决于事务的粒度，像springboot框架的@Transactional注解，其粒度最小为方法，写代码时又想要明确异常位置，因此需要在方法中进行try catch，catch捕获异常后记录日志再抛出异常，异常由事务捕获，事务捕获异常则会回滚。</description><guid isPermaLink="true">https://ZMJunwakaka.github.io/ZMJun/post/20241113-shi-wu-yu-yi-chang.html</guid><pubDate>Wed, 13 Nov 2024 09:32:52 +0000</pubDate></item><item><title>20241110Docker学习笔记---持续总结</title><link>https://ZMJunwakaka.github.io/ZMJun/post/20241110Docker-xue-xi-bi-ji-----chi-xu-zong-jie.html</link><description># 目录&#13;
- [一、Docker架构](#一、Docker架构)&#13;
- [二、理解容器](#二、理解容器)&#13;
- [三、安装Docker](#三、安装Docker)&#13;
- [四、镜像操作](#四、镜像操作)&#13;
- [五、容器操作](#五、容器操作)&#13;
- [六、创建Docker容器为新镜像并推送到DockerHub](#六、创建Docker容器为新镜像并推送到DockerHub)&#13;
- [七、Docker存储](#七、Docker存储)&#13;
- [八、Docker网络](#八、Docker网络)&#13;
## 一、Docker架构&#13;
![image](https://github.com/user-attachments/assets/88250f5c-48e0-4fdf-b181-90e679e5e5dc)&#13;
1.主机安装docker环境（Docker Host），Docker Daemon后台进程（服务）持续运行。</description><guid isPermaLink="true">https://ZMJunwakaka.github.io/ZMJun/post/20241110Docker-xue-xi-bi-ji-----chi-xu-zong-jie.html</guid><pubDate>Sun, 10 Nov 2024 14:01:19 +0000</pubDate></item><item><title>20241110MQTT学习笔记---持续总结</title><link>https://ZMJunwakaka.github.io/ZMJun/post/20241110MQTT-xue-xi-bi-ji-----chi-xu-zong-jie.html</link><description> &gt; MQTT：后端开发工程师、嵌入式工程师必备技能。</description><guid isPermaLink="true">https://ZMJunwakaka.github.io/ZMJun/post/20241110MQTT-xue-xi-bi-ji-----chi-xu-zong-jie.html</guid><pubDate>Sun, 10 Nov 2024 13:46:39 +0000</pubDate></item><item><title>mysql安装配置之坑</title><link>https://ZMJunwakaka.github.io/ZMJun/post/mysql-an-zhuang-pei-zhi-zhi-keng.html</link><description>&gt; 目前mysql8有一个问题：root用户访问权限默认为localhost，导致navicat等软件连接不上，需要新建用户并设置访问权限为%（所有）&#13;
### 一、安装完成配置完环境变量后使用dbeaver等工具连接mysql报错（需要开启root远程登录）&#13;
&#13;
&gt; 报错信息：mysqlAccess denied for user 'root'@'localhost' (using password: YES)&#13;
&#13;
### 二、解决方案一：允许root远程登录&#13;
具体操作看网址：&#13;
https://blog.csdn.net/liliuqing/article/details/88723409&#13;
&#13;
### 三、解决方案二：重装mysql&#13;
&#13;
&gt; 1.卸载mysql&#13;
&#13;
![image](https://github.com/user-attachments/assets/6e940fda-727f-4876-9d2c-c5d8cc1c0a53)&#13;
&#13;
&gt; 2.安装mysql，双击mysql.msi选择新建用户‘hairun’，host权限为%（所有）&#13;
&#13;
&lt;img width='600' alt='604547c71758827bf3fb95cac5b2082' src='https://github.com/user-attachments/assets/84f1540d-fe2a-402b-9652-e1e1c7cc1536'&gt;&#13;
&#13;
&gt;3.问题解决。</description><guid isPermaLink="true">https://ZMJunwakaka.github.io/ZMJun/post/mysql-an-zhuang-pei-zhi-zhi-keng.html</guid><pubDate>Fri, 08 Nov 2024 07:41:53 +0000</pubDate></item><item><title>java配置环境变量</title><link>https://ZMJunwakaka.github.io/ZMJun/post/java-pei-zhi-huan-jing-bian-liang.html</link><description>### 一、傻瓜式安装jdk&#13;
![image](https://github.com/user-attachments/assets/f862addb-8980-4b52-b955-bd1e3aadd5c0)&#13;
### 二、配置环境变量&#13;
&#13;
&gt; 1.只需要配置环境变量path即可&#13;
&gt; 不用那么麻烦配置JAVA_HOME等&#13;
&#13;
![image](https://github.com/user-attachments/assets/cc32bb4a-070d-454e-be51-78d659efccde)&#13;
![image](https://github.com/user-attachments/assets/3c5a8e3d-c659-4c10-baa8-a3504d5c6d81)&#13;
![image](https://github.com/user-attachments/assets/e7e4ac47-6ed8-4665-a917-447bf17547ca)&#13;
&#13;
&gt; 2.配置bin文件夹，上移到最上面&#13;
&gt; &#13;
&#13;
![image](https://github.com/user-attachments/assets/e7972d7d-ac0e-4a9c-b3f7-708ce6dbddef)&#13;
&#13;
&gt; 3.cmd检查配置是否成功&#13;
&gt; &#13;
&#13;
![image](https://github.com/user-attachments/assets/c185cb6a-6bc8-4394-ab20-0a2c6f11cb55)&#13;
&#13;
。</description><guid isPermaLink="true">https://ZMJunwakaka.github.io/ZMJun/post/java-pei-zhi-huan-jing-bian-liang.html</guid><pubDate>Fri, 08 Nov 2024 03:20:42 +0000</pubDate></item><item><title>20241031《C#高效编程》持续总结</title><link>https://ZMJunwakaka.github.io/ZMJun/post/20241031%E3%80%8AC%23-gao-xiao-bian-cheng-%E3%80%8B-chi-xu-zong-jie.html</link><description>## 1.使用属性而不是可访问的数据成员&#13;
## 2.用运行时常量readonly而不是编译期常量const&#13;
在 C# 中，使用 `readonly` 字段而不是 `const` 常量在许多情况下是一个更好的选择，尤其是当需要在运行时确定值时。</description><guid isPermaLink="true">https://ZMJunwakaka.github.io/ZMJun/post/20241031%E3%80%8AC%23-gao-xiao-bian-cheng-%E3%80%8B-chi-xu-zong-jie.html</guid><pubDate>Thu, 31 Oct 2024 14:43:40 +0000</pubDate></item><item><title>20241031switch与goto</title><link>https://ZMJunwakaka.github.io/ZMJun/post/20241031switch-yu-goto.html</link><guid isPermaLink="true">https://ZMJunwakaka.github.io/ZMJun/post/20241031switch-yu-goto.html</guid><pubDate>Thu, 31 Oct 2024 02:12:18 +0000</pubDate></item><item><title>20241027委托delegate、Action、Func总结</title><link>https://ZMJunwakaka.github.io/ZMJun/post/20241027-wei-tuo-delegate%E3%80%81Action%E3%80%81Func-zong-jie.html</link><description>## 基本概念与应用&#13;
### 一、 [委托（Delegate）](https://learn.microsoft.com/zh-cn/dotnet/csharp/programming-guide/delegates/)&#13;
&#13;
&gt; 定义和用法:&#13;
&gt; 委托是一种类型安全的函数指针，允许你封装一个或多个方法。</description><guid isPermaLink="true">https://ZMJunwakaka.github.io/ZMJun/post/20241027-wei-tuo-delegate%E3%80%81Action%E3%80%81Func-zong-jie.html</guid><pubDate>Sun, 27 Oct 2024 13:18:04 +0000</pubDate></item><item><title>20241024事件、Dispose()与using实战</title><link>https://ZMJunwakaka.github.io/ZMJun/post/20241024-shi-jian-%E3%80%81Dispose%28%29-yu-using-shi-zhan.html</link><description>### 1.事件&#13;
&#13;
&gt; [类](https://learn.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/class) 或对象可以通过事件向其他类或对象通知发生的相关事情。</description><guid isPermaLink="true">https://ZMJunwakaka.github.io/ZMJun/post/20241024-shi-jian-%E3%80%81Dispose%28%29-yu-using-shi-zhan.html</guid><pubDate>Thu, 24 Oct 2024 14:54:53 +0000</pubDate></item><item><title>20241016未获取到车位报无权限bug</title><link>https://ZMJunwakaka.github.io/ZMJun/post/20241016-wei-huo-qu-dao-che-wei-bao-wu-quan-xian-bug.html</link><description>### 1.前提：所有车位都被禁用，导致无空闲车位，道闸应该报无空闲车位却报无权限。</description><guid isPermaLink="true">https://ZMJunwakaka.github.io/ZMJun/post/20241016-wei-huo-qu-dao-che-wei-bao-wu-quan-xian-bug.html</guid><pubDate>Wed, 16 Oct 2024 02:51:53 +0000</pubDate></item><item><title>20241014枚举反射总结</title><link>https://ZMJunwakaka.github.io/ZMJun/post/20241014-mei-ju-fan-she-zong-jie.html</link><description>### 一、反射基本概念&#13;
反射是一种可以在运行时动态地检查类型（类、枚举、结构等）信息的技术，甚至可以访问类成员（方法、属性、字段）和自定义的特性。</description><guid isPermaLink="true">https://ZMJunwakaka.github.io/ZMJun/post/20241014-mei-ju-fan-she-zong-jie.html</guid><pubDate>Mon, 14 Oct 2024 05:57:18 +0000</pubDate></item><item><title>20241012空值条件运算符 (?.) 和 空合并运算符 (??)</title><link>https://ZMJunwakaka.github.io/ZMJun/post/20241012-kong-zhi-tiao-jian-yun-suan-fu-%20%28-.%29%20-he-%20-kong-he-bing-yun-suan-fu-%20%28--%29.html</link><description>```C#&#13;
 public bool SendAuthenticationResult(SendAuthenticationResultParam param)&#13;
 {&#13;
     try&#13;
     {&#13;
&#13;
         IRoadGateService service = HSFService.Proxy&lt;IRoadGateService&gt;();&#13;
         var result = service.UploadAuthenticationResult(new UploadAuthenticationResultParams&#13;
         {&#13;
             CPS = param.CPS,&#13;
             DeviceID = param.DeviceID,&#13;
             FailReason = param.FailReason,&#13;
             IsAuthenticationResult = param.IsAuthenticationResult,&#13;
             MsgID = param.MsgID,&#13;
             OrderID = param.OrderID,&#13;
             PlateNum = param.PlateNum,&#13;
             PSR = param.PSR&#13;
         });&#13;
&#13;
         return result?.ResultState ?? false;&#13;
     }&#13;
     catch (Exception e)&#13;
     {&#13;
         PMSLogFactory.GetLogger.LogError(e, ErrorCodeConsts.下发开闸指令异常, Ext6Consts.入口开闸申请处理业务, '下发开闸鉴权结果接口');&#13;
     }&#13;
&#13;
     return false;&#13;
 }&#13;
```&#13;
&#13;
### `return result?.ResultState ?? false;` 是一行 C# 代码，使用了 **空值条件运算符** (`?.`) 和 **空合并运算符** (`??`)。</description><guid isPermaLink="true">https://ZMJunwakaka.github.io/ZMJun/post/20241012-kong-zhi-tiao-jian-yun-suan-fu-%20%28-.%29%20-he-%20-kong-he-bing-yun-suan-fu-%20%28--%29.html</guid><pubDate>Sat, 12 Oct 2024 06:14:10 +0000</pubDate></item><item><title>20241011引用类型堆内存分析</title><link>https://ZMJunwakaka.github.io/ZMJun/post/20241011-yin-yong-lei-xing-dui-nei-cun-fen-xi.html</link><description>```C#&#13;
var record = context.ParkingOrder = new ParkingOrdersEntity();&#13;
```&#13;
赋值操作是从右向左进行的，所以最内层的 new ParkingOrdersEntity() 先创建对象。</description><guid isPermaLink="true">https://ZMJunwakaka.github.io/ZMJun/post/20241011-yin-yong-lei-xing-dui-nei-cun-fen-xi.html</guid><pubDate>Fri, 11 Oct 2024 14:02:57 +0000</pubDate></item><item><title>20241011LINQ之FirstOrDefault()</title><link>https://ZMJunwakaka.github.io/ZMJun/post/20241011LINQ-zhi-FirstOrDefault%28%29.html</link><description>#### FirstOrDefault()：返回集合中匹配指定条件的第一个元素。</description><guid isPermaLink="true">https://ZMJunwakaka.github.io/ZMJun/post/20241011LINQ-zhi-FirstOrDefault%28%29.html</guid><pubDate>Fri, 11 Oct 2024 13:48:59 +0000</pubDate></item><item><title>20241011Newtonsoft.Json序列化与反序列化json</title><link>https://ZMJunwakaka.github.io/ZMJun/post/20241011Newtonsoft.Json-xu-lie-hua-yu-fan-xu-lie-hua-json.html</link><description>### 1.序列化成json串&#13;
```C#&#13;
using Newtonsoft.Json;&#13;
namespace ConsoleAppTest1011&#13;
{&#13;
    internal class Program&#13;
    {&#13;
        static void Main(string[] args)&#13;
        {&#13;
            Dictionary&lt;string, string&gt; dictionary = ResponseMethod('鲁B16F0H');&#13;
            Console.WriteLine(dictionary.ToArray()[0]); &#13;
            Console.WriteLine(dictionary['filter']); &#13;
        }&#13;
&#13;
        static Dictionary&lt;string, string&gt; ResponseMethod(string plateNo)&#13;
        {&#13;
            Dictionary&lt;string, string&gt; SGparam = new Dictionary&lt;string, string&gt;&#13;
            {&#13;
                { 'filter',JsonConvert.SerializeObject(&#13;
                    new {&#13;
                        PlateNo=plateNo&#13;
                    }&#13;
                    )&#13;
                }&#13;
            };&#13;
            return SGparam;&#13;
        }&#13;
    }&#13;
}&#13;
```&#13;
![image](https://github.com/user-attachments/assets/80010625-8c64-4e9c-b42a-099b2940b466)&#13;
。</description><guid isPermaLink="true">https://ZMJunwakaka.github.io/ZMJun/post/20241011Newtonsoft.Json-xu-lie-hua-yu-fan-xu-lie-hua-json.html</guid><pubDate>Fri, 11 Oct 2024 06:28:13 +0000</pubDate></item><item><title>20241011排查二次驶入鉴权失败bug</title><link>https://ZMJunwakaka.github.io/ZMJun/post/20241011-pai-cha-er-ci-shi-ru-jian-quan-shi-bai-bug.html</link><description>### 1.根据车牌号找到订单编号&#13;
![image](https://github.com/user-attachments/assets/734dd806-f308-429b-ae5c-52fe0be5af3a)&#13;
### 2.根据订单编号查询状态流转上下文信息&#13;
![image](https://github.com/user-attachments/assets/e31b5547-8962-4949-b71c-73cd9f78451c)&#13;
### 3.根据上下文信息通过代码排查PMS模块中代码bug&#13;
### 注意：要排查道闸驶入的时候不能只按照订单编号查，因为有可能还没有创建订单导致上下文中不包含订单编号。</description><guid isPermaLink="true">https://ZMJunwakaka.github.io/ZMJun/post/20241011-pai-cha-er-ci-shi-ru-jian-quan-shi-bai-bug.html</guid><pubDate>Fri, 11 Oct 2024 03:33:58 +0000</pubDate></item><item><title>20241010停车取车状态流程学习</title><link>https://ZMJunwakaka.github.io/ZMJun/post/20241010-ting-che-qu-che-zhuang-tai-liu-cheng-xue-xi.html</link><description>![image](https://github.com/user-attachments/assets/3db583d9-0593-4e09-b0c0-7325968a2785)&#13;
&#13;
### 首先熟悉缓冲车位状态上报，任务完成，请求任务，执行存车取车，（消防不用管，挪车先不考虑）&#13;
### 查看PMS对应代码&#13;
&#13;
### 一、道闸上行&#13;
1. ParkingVehicleInBusiness（入口开闸申请处理业务）请求驶入，创建订单&#13;
&#13;
2. RoadGateUploadPhotoBusiness（道闸照片上传处理业务）&#13;
&#13;
&gt; 上传两条消息（'Param'的'PhotoType'分别为1和2）分别与1和3相对应，上传照片url，与1、3分别配合进行从redis中获取'RoadGateEventMsg'到上下文中并进行全链路数据记录。</description><guid isPermaLink="true">https://ZMJunwakaka.github.io/ZMJun/post/20241010-ting-che-qu-che-zhuang-tai-liu-cheng-xue-xi.html</guid><pubDate>Thu, 10 Oct 2024 07:46:29 +0000</pubDate></item><item><title>test</title><link>https://ZMJunwakaka.github.io/ZMJun/post/test.html</link><description>test。</description><guid isPermaLink="true">https://ZMJunwakaka.github.io/ZMJun/post/test.html</guid><pubDate>Mon, 07 Oct 2024 10:53:56 +0000</pubDate></item></channel></rss>