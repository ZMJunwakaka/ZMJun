<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0"><channel><title>郑明君のBlog</title><link>https://ZMJunwakaka.github.io/ZMJun</link><description>C# Learning Blog</description><copyright>郑明君のBlog</copyright><docs>http://www.rssboard.org/rss-specification</docs><generator>python-feedgen</generator><image><url>https://avatars.githubusercontent.com/u/80440497?v=4</url><title>avatar</title><link>https://ZMJunwakaka.github.io/ZMJun</link></image><lastBuildDate>Tue, 15 Oct 2024 07:30:47 +0000</lastBuildDate><managingEditor>郑明君のBlog</managingEditor><ttl>60</ttl><webMaster>郑明君のBlog</webMaster><item><title>20241014枚举反射总结</title><link>https://ZMJunwakaka.github.io/ZMJun/post/20241014-mei-ju-fan-she-zong-jie.html</link><description>### 一、反射基本概念&#13;
反射是一种可以在运行时动态地检查类型（类、枚举、结构等）信息的技术，甚至可以访问类成员（方法、属性、字段）和自定义的特性。</description><guid isPermaLink="true">https://ZMJunwakaka.github.io/ZMJun/post/20241014-mei-ju-fan-she-zong-jie.html</guid><pubDate>Mon, 14 Oct 2024 05:57:18 +0000</pubDate></item><item><title>20241012空值条件运算符 (?.) 和 空合并运算符 (??)</title><link>https://ZMJunwakaka.github.io/ZMJun/post/20241012-kong-zhi-tiao-jian-yun-suan-fu-%20%28-.%29%20-he-%20-kong-he-bing-yun-suan-fu-%20%28--%29.html</link><description>```C#&#13;
 public bool SendAuthenticationResult(SendAuthenticationResultParam param)&#13;
 {&#13;
     try&#13;
     {&#13;
&#13;
         IRoadGateService service = HSFService.Proxy&lt;IRoadGateService&gt;();&#13;
         var result = service.UploadAuthenticationResult(new UploadAuthenticationResultParams&#13;
         {&#13;
             CPS = param.CPS,&#13;
             DeviceID = param.DeviceID,&#13;
             FailReason = param.FailReason,&#13;
             IsAuthenticationResult = param.IsAuthenticationResult,&#13;
             MsgID = param.MsgID,&#13;
             OrderID = param.OrderID,&#13;
             PlateNum = param.PlateNum,&#13;
             PSR = param.PSR&#13;
         });&#13;
&#13;
         return result?.ResultState ?? false;&#13;
     }&#13;
     catch (Exception e)&#13;
     {&#13;
         PMSLogFactory.GetLogger.LogError(e, ErrorCodeConsts.下发开闸指令异常, Ext6Consts.入口开闸申请处理业务, '下发开闸鉴权结果接口');&#13;
     }&#13;
&#13;
     return false;&#13;
 }&#13;
```&#13;
&#13;
### `return result?.ResultState ?? false;` 是一行 C# 代码，使用了 **空值条件运算符** (`?.`) 和 **空合并运算符** (`??`)。</description><guid isPermaLink="true">https://ZMJunwakaka.github.io/ZMJun/post/20241012-kong-zhi-tiao-jian-yun-suan-fu-%20%28-.%29%20-he-%20-kong-he-bing-yun-suan-fu-%20%28--%29.html</guid><pubDate>Sat, 12 Oct 2024 06:14:10 +0000</pubDate></item><item><title>20241011引用类型堆内存分析</title><link>https://ZMJunwakaka.github.io/ZMJun/post/20241011-yin-yong-lei-xing-dui-nei-cun-fen-xi.html</link><description>```C#&#13;
var record = context.ParkingOrder = new ParkingOrdersEntity();&#13;
```&#13;
赋值操作是从右向左进行的，所以最内层的 new ParkingOrdersEntity() 先创建对象。</description><guid isPermaLink="true">https://ZMJunwakaka.github.io/ZMJun/post/20241011-yin-yong-lei-xing-dui-nei-cun-fen-xi.html</guid><pubDate>Fri, 11 Oct 2024 14:02:57 +0000</pubDate></item><item><title>20241011LINQ之FirstOrDefault()</title><link>https://ZMJunwakaka.github.io/ZMJun/post/20241011LINQ-zhi-FirstOrDefault%28%29.html</link><description>#### FirstOrDefault()：返回集合中匹配指定条件的第一个元素。</description><guid isPermaLink="true">https://ZMJunwakaka.github.io/ZMJun/post/20241011LINQ-zhi-FirstOrDefault%28%29.html</guid><pubDate>Fri, 11 Oct 2024 13:48:59 +0000</pubDate></item><item><title>20241011Newtonsoft.Json序列化与反序列化json</title><link>https://ZMJunwakaka.github.io/ZMJun/post/20241011Newtonsoft.Json-xu-lie-hua-yu-fan-xu-lie-hua-json.html</link><description>### 1.序列化成json串&#13;
```C#&#13;
using Newtonsoft.Json;&#13;
namespace ConsoleAppTest1011&#13;
{&#13;
    internal class Program&#13;
    {&#13;
        static void Main(string[] args)&#13;
        {&#13;
            Dictionary&lt;string, string&gt; dictionary = ResponseMethod('鲁B16F0H');&#13;
            Console.WriteLine(dictionary.ToArray()[0]); &#13;
            Console.WriteLine(dictionary['filter']); &#13;
        }&#13;
&#13;
        static Dictionary&lt;string, string&gt; ResponseMethod(string plateNo)&#13;
        {&#13;
            Dictionary&lt;string, string&gt; SGparam = new Dictionary&lt;string, string&gt;&#13;
            {&#13;
                { 'filter',JsonConvert.SerializeObject(&#13;
                    new {&#13;
                        PlateNo=plateNo&#13;
                    }&#13;
                    )&#13;
                }&#13;
            };&#13;
            return SGparam;&#13;
        }&#13;
    }&#13;
}&#13;
```&#13;
![image](https://github.com/user-attachments/assets/80010625-8c64-4e9c-b42a-099b2940b466)&#13;
。</description><guid isPermaLink="true">https://ZMJunwakaka.github.io/ZMJun/post/20241011Newtonsoft.Json-xu-lie-hua-yu-fan-xu-lie-hua-json.html</guid><pubDate>Fri, 11 Oct 2024 06:28:13 +0000</pubDate></item><item><title>20241011排查二次驶入鉴权失败bug</title><link>https://ZMJunwakaka.github.io/ZMJun/post/20241011-pai-cha-er-ci-shi-ru-jian-quan-shi-bai-bug.html</link><description>### 1.根据车牌号找到订单编号&#13;
![image](https://github.com/user-attachments/assets/734dd806-f308-429b-ae5c-52fe0be5af3a)&#13;
### 2.根据订单编号查询状态流转上下文信息&#13;
![image](https://github.com/user-attachments/assets/e31b5547-8962-4949-b71c-73cd9f78451c)&#13;
### 3.根据上下文信息通过代码排查PMS模块中代码bug。</description><guid isPermaLink="true">https://ZMJunwakaka.github.io/ZMJun/post/20241011-pai-cha-er-ci-shi-ru-jian-quan-shi-bai-bug.html</guid><pubDate>Fri, 11 Oct 2024 03:33:58 +0000</pubDate></item><item><title>20241010停车取车状态流程学习</title><link>https://ZMJunwakaka.github.io/ZMJun/post/20241010-ting-che-qu-che-zhuang-tai-liu-cheng-xue-xi.html</link><description>![image](https://github.com/user-attachments/assets/3db583d9-0593-4e09-b0c0-7325968a2785)&#13;
&#13;
### 首先熟悉缓冲车位状态上报，任务完成，请求任务，执行存车取车，（消防不用管，挪车先不考虑）&#13;
### 查看PMS对应代码&#13;
&#13;
### 一、道闸上行&#13;
1. ParkingVehicleInBusiness（入口开闸申请处理业务）请求驶入，创建订单&#13;
&#13;
2. RoadGateUploadPhotoBusiness（道闸照片上传处理业务）&#13;
&#13;
&gt; 上传两条消息（'Param'的'PhotoType'分别为1和2）分别与1和3相对应，上传照片url，与1、3分别配合进行从redis中获取'RoadGateEventMsg'到上下文中并进行全链路数据记录。</description><guid isPermaLink="true">https://ZMJunwakaka.github.io/ZMJun/post/20241010-ting-che-qu-che-zhuang-tai-liu-cheng-xue-xi.html</guid><pubDate>Thu, 10 Oct 2024 07:46:29 +0000</pubDate></item><item><title>test</title><link>https://ZMJunwakaka.github.io/ZMJun/post/test.html</link><description>test。</description><guid isPermaLink="true">https://ZMJunwakaka.github.io/ZMJun/post/test.html</guid><pubDate>Mon, 07 Oct 2024 10:53:56 +0000</pubDate></item></channel></rss>